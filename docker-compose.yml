version: "3.8"
volumes:
  eshop:
    external: true
services:
    sqlserver:
        container_name: sqlInDocker
        image: mcr.microsoft.com/mssql/server:2019-latest
        environment:
          - MSSQL_SA_PASSWORD=Welcome1$$
          - ACCEPT_EULA=Y
        volumes:
          - eshop:/home/node/app/db/sqlserver
        ports:
          - "1433:1433"
  # rabbitmq:
    # container_name: rabbitInDocker
    # image: rabbitmq:3-management
    # environment:
      # - RABBITMQ_DEFAULT_USER=guest
      # - RABBITMQ_DEFAULT_PASS=guest
    # volumes:
      # - eshop:/home/node/app/bus/rabbitmq
    # ports:
      # - "5672:5672"
    mongo:
        image: mongo
        volumes:
          - eshop:/home/node/app/db/mongo
        ports:
          - "27017:27017"
    # basket-service:
        # build: ./basket-service
        # ports:
            # - "5000:80"
            # - "5001:80"
   #apigateways:
    # basket-db:
        # image: mcr.microsoft.com/mssql/server:2019-latest
        # ports:
            # - "1434:1433"
        # environment:
            # SA_PASSWORD: "Welcome1234.?"
            # ACCEPT_EULA: "Y"
    # basket-api:
    # basket-listener:
    
    # catalog-db:
    # catalog-api:
        # build:
            # context: ./catalog-service
            # dockerfile: ./dockerfile-api
            
        # ports:
            # - "5002:80"
            # - "5003:80"
        # depends_on:
            # - sqlserver
    # catalog-brand-listener:
    # catalog-listener:
    # catalog-type-listener:
            
    # identity-db:
    # identity-api:
    # identity-listener:
        # build: ./identity-service
        # ports:
            # - "5004:80"
            # - "5005:80"
    
    # location-db:
    # location-listener:
    # location-api:
        # build: ./location-service
        # ports:
            # - "5006:80"
            # - "5007:80"
    
    # marketing-db:
    # marketing-listener:
    # marketing-api:
        # build: ./marketing-service
        # ports:
            # - "5008:80"
            # - "5009:80"
    
    # ordering-db:
        # build: ./ordering-service
        # ports:
            # - "5010:80"
            # - "5011:80"
    # ordering-api:
    # ordering-listener:
    
    # ordering-api:
    
    # webhooks-api: